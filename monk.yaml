namespace: tutorial-phaser

redis:
  defines: runnable
  inherits: redis/redis
  metadata:
    name: redis
    description: Redis database used by the server for state management and presence.
    icon: >-
      https://cdn.icon-icons.com/icons2/2415/PNG/512/redis_original_wordmark_logo_icon_146369.png
  variables:
    redis_disable_commands:
      type: string
      value: FLUSHDB,FLUSHALL,CONFIG
      description: ''
    redis_empty_password:
      type: string
      value: 'yes'
      description: ''
    redis_instance_name:
      type: string
      value: master
      description: ''
    redis_io_thread:
      type: string
      value: '1'
      description: ''
    redis_io_threads_do_reads:
      type: string
      value: 'yes'
      description: ''
    redis_port:
      type: int
      value: '6379'
      description: ''

client:
  defines: runnable
  metadata:
    name: client
    description: Frontend service for the game, built with Phaser and Colyseus.js.
    icon: https://emojiapi.dev/api/v1/robot.svg
  containers:
    client:
      image: env-2758.registry.local/client:master-8084c30
      build: .
      dockerfile: Dockerfile.client
  services:
    http:
      description: Port for serving the frontend application over HTTP
      container: client
      port: 80
      host-port: 80
      publish: true
      protocol: tcp
  connections: {}
  variables: {}

server:
  defines: runnable
  metadata:
    name: server
    description: >-
      Backend game server using Colyseus and Express.js, with Redis for state
      management.
    icon: https://emojiapi.dev/api/v1/robot.svg
  containers:
    server:
      image: env-2758.registry.local/server:master-8084c30
      build: .
      dockerfile: Dockerfile.server
  services:
    server-http-port:
      description: HTTP port for incoming game and API requests
      container: server
      port: $port
      host-port: $port
      publish: true
      protocol: tcp
  connections:
    server-to-redis:
      target: tutorial-phaser/redis
      service: redis-svc
      optional: true
      description: >-
        Connection from the server to the Redis service for state management and
        presence
  variables:
    port:
      env: PORT
      type: int
      value: 2567
      description: Port on which the server listens
    node-env:
      env: NODE_ENV
      type: string
      value: production
      description: >-
        Defines the environment in which the server is running, commonly used to
        determine development or production modes

stack:
  defines: group
  members:
    - tutorial-phaser/redis
    - tutorial-phaser/client
    - tutorial-phaser/server
